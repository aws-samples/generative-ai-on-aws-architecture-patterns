# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Retrieval augmented generation generative AI chatbot

Metadata:
  AWS::ServerlessRepo::Application:
    Name: genai-on-aws-workshop-rag-bot
    Description: Workshop to implement a retrieval augmented generation generative AI chatbot
    Author: ilyiny
    SpdxLicenseId: MIT
    LicenseUrl: ./LICENSE
    ReadmeUrl: ./README.md
    Labels: ['amazon', 'generative AI', 'genAI', 'RAG', 'RAG chatbot', 'Bedrock']
    HomePageUrl: https://github.com/aws-samples/generative-ai-on-aws-architecture-patterns
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/aws-samples/generative-ai-on-aws-architecture-patterns

Globals:
  Function:
    Runtime: python3.11
    MemorySize: 1024
    Timeout: 120
    Environment:
      Variables:
        LOG_LEVEL: INFO
    Tags:
      Project: genai-on-aws-workshop-rag-bot

Outputs:
  RAGChatBotUrl:
    Description: URL of the chatbot front-end
    Value: !GetAtt App.Outputs.AppUrl
  
Parameters:
  LLMContextLength:
    Type: Number
    Default: 2048
    Description: Max number of tokens in LLM context, input and output text

  ECRImageURI:
    Type: String
    Description: Image URI of the chatbot front-end

  KendraRegion:
    Type: String
    Description: Kendra region if Kendra index is in a different region
    Default: ''

  KendraIndexId:
    Type: String
    Description: Amazon Kendra index id

  SageMakerLLMEndpointName:
    Type: String
    Description: LLM endpoint name, leave empty if using Amazon Bedrock LLM
  
  CreateVPC:
    AllowedValues:
      - 'YES'
      - 'NO'
    Type: String
    Description: Create a dedicated VPC for the front-end stack. If NO, the default VPC is be used
    Default: "NO"

  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 12.0.0.0/16
    Description: CIDR block for a new VPC

Conditions:
  KendraRegionCondition: !Not [ !Equals [ !Ref KendraRegion, '' ] ]

Rules:
  KendraIndexIdNotEmpty:
    Assertions:
      - Assert: !Not [ !Equals [ !Ref KendraIndexId, '' ] ]
        AssertDescription: KendraIndexId must be provided
  ECRImageURINotEmpty:
    Assertions:
      - Assert: !Not [ !Equals [ !Ref ECRImageURI, '' ] ]
        AssertDescription: ECRImageURI must be provided

Resources:
  
######## CF Stacks ########
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: cfn-templates/vpc.yaml
      Parameters:
        VPCCIDR: !Ref VPCCIDR
        CreateVPC: !Ref CreateVPC
        GetDefaultVpcFunctionArn: !GetAtt GetDefaultVpcFunction.Arn
      
  App:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: cfn-templates/app.yaml
      Parameters:
        APIId: !Ref RagAppApi
        ECRImageURI: !Ref ECRImageURI
        VPCId: !GetAtt VPC.Outputs.VPCId
        PublicSubnet1: !GetAtt VPC.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt VPC.Outputs.PublicSubnet2


######## Serverless backend ########
  RagAppApi:
      Type: AWS::Serverless::Api
      Properties:
        StageName: prod

  GetDefaultVpcFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./orchestration/get-default-vpc
      Handler: get_default_vpc.lambda_handler
      PackageType: Zip
      ReservedConcurrentExecutions: 1
      Policies:
        - AmazonEC2ReadOnlyAccess

  RagAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./orchestration/rag-app
      Handler: rag_app.lambda_handler
      PackageType: Zip
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          KENDRA_REGION: !If 
              - KendraRegionCondition
              - !Ref KendraRegion
              - !Ref "AWS::Region"
          KENDRA_INDEX_ID: !Ref KendraIndexId
          LLM_MEMORY_TABLE: !Ref MemoryTable
          SM_ENDPOINT_NAME: !Ref SageMakerLLMEndpointName       
          LLM_CONTEXT_LENGTH: !Ref LLMContextLength
          BEDROCK_MODEL_ID: "anthropic.claude-v2"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ragapp
            Method: POST
            RestApiId:
              Ref: RagAppApi
      Policies:
        - Statement:
          - Sid: SageMakerAccess
            Effect: Allow
            Action:
              - sagemaker:InvokeEndpoint*
              - sagemaker:DescribeEndpoint
              - sagemaker:DescribeEndpointConfig
              - sagemaker:ListEndpoints
              - sagemaker:ListTags
            Resource: '*'
          - Sid: DynamoDbAccess
            Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: "*"
          - Sid: BedrockRuntimeAccess
            Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: "*"
          - Sid: KendraSearchAccess
            Effect: Allow
            Action:
              - kendra:Query
              - kendra:BatchGetDocumentStatus
              - kendra:Retrieve
            Resource: "*"

  MemoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST